{"version":3,"sources":["Firebase.js","components/EditCardModal.js","components/Card.js","components/List.js","components/AuthContext.js","components/Board.js","components/BoardPreview.js","components/CreateBoardForm.js","components/pages/Home.js","components/pages/PageNotFound.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","boardsRef","collection","listsRef","cardsRef","EditCardModal","state","availableLabels","selectedLabels","textInput","React","createRef","updateCard","e","a","preventDefault","cardId","props","cardData","id","newText","current","value","labels","doc","update","toggleModal","console","error","setLabel","label","includes","newLabels","filter","element","setState","push","this","className","style","display","modalOpen","onSubmit","onClick","map","key","background","defaultValue","text","ref","Component","Card","deleteCard","data","delete","Fragment","readOnly","List","currentCards","fetchCards","listId","where","orderBy","onSnapshot","snapshot","docChanges","forEach","change","card","type","index","findIndex","item","cards","nameInput","createNewCard","list","createdAt","Date","add","log","deleteList","updateList","newTitle","currentTarget","name","onChange","title","Object","keys","placeholder","AuthContext","createContext","AuthProvider","user","Provider","children","AuthConsumer","Consumer","Board","currentBoard","currentLists","getLists","boardId","getBoard","get","board","addBoardInput","createNewList","match","params","deleteBoard","updateBoard","backgroundColor","BoardPreview","goToBoard","history","pathname","withRouter","CreateBoardForm","handleSubmit","createNewBoard","target","Home","getBoards","userId","boards","PageNotFound","Header","href","role","aria-label","App","boardObj","newBoard","docs","length","lists","exact","path","render","component","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a80928f7.chunk.js","sourcesContent":["import firebase from 'firebase/app'\r\nimport 'firebase/firestore'\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyAFyaOi_tk69xFzURmdBNpNbSq00_t3zVw\",\r\n    authDomain: \"react-trello-9a49c.firebaseapp.com\",\r\n    databaseURL: \"https://react-trello-9a49c.firebaseio.com\",\r\n    projectId: \"react-trello-9a49c\",\r\n    storageBucket: \"react-trello-9a49c.appspot.com\",\r\n    messagingSenderId: \"728388101690\",\r\n    appId: \"1:728388101690:web:9f90494954a42a5fa5f703\",\r\n    measurementId: \"G-H1GEGTP910\"\r\n}\r\n\r\nfirebase.initializeApp(config)\r\nconst db = firebase.firestore()\r\n\r\nconst boardsRef = db.collection('boards')\r\nconst listsRef = db.collection('lists')\r\nconst cardsRef = db.collection('cards')\r\n\r\nexport {boardsRef, listsRef, cardsRef}","import React from 'react'\r\nimport { cardsRef } from '../Firebase'\r\nimport PropTypes from 'prop-types'\r\nimport TextareaAutosize from 'react-autosize-textarea'\r\nclass EditCardModal extends React.Component {\r\n    state = {\r\n        availableLabels: [\r\n            \"#80ccff\",\r\n            \"#80ffaa\",\r\n            \"#f94a1e\",\r\n            \"#ffb3ff\",\r\n            \"#bf00ff\",\r\n            \"#ffad33\",\r\n        ],\r\n        selectedLabels: []\r\n    }\r\n    componentDidMount () {\r\n        this.setState({\r\n            selectedLabels: this.props.cardData.labels\r\n        })\r\n    }\r\n    textInput = React.createRef()\r\n    updateCard = async e => {\r\n        try {\r\n            e.preventDefault()\r\n            const cardId = this.props.cardData.id\r\n            const newText = this.textInput.current.value\r\n            const labels = this.state.selectedLabels\r\n            const card = await cardsRef.doc(cardId)\r\n            card.update({\r\n                'card.text': newText,\r\n                'card.labels': labels\r\n            })\r\n            this.props.toggleModal()\r\n        } catch(error) {\r\n            console.error('Error updating cards: ', error)\r\n        }\r\n    }\r\n    setLabel = label => {\r\n        const labels =[...this.state.selectedLabels]\r\n        if(labels.includes(label)) {\r\n            const newLabels = labels.filter((element) => {\r\n                return element !== label\r\n            })\r\n            this.setState({selectedLabels: newLabels})\r\n        } else {\r\n            labels.push(label)\r\n            this.setState({selectedLabels: labels})\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div \r\n            className=\"modal-wrapper\"\r\n            style={{display:this.props.modalOpen ? 'block' : 'none'}}>\r\n                <div className=\"modal-body\">\r\n                    <form onSubmit={this.updateCard}>\r\n                        <div>\r\n                            <span \r\n                            className=\"modal-close\"\r\n                            onClick={this.props.toggleModal}>&times;</span>\r\n                            <p className=\"label-title\">add / remove labels</p>\r\n                            {this.state.availableLabels.map(label => {\r\n                                return <span\r\n                                key={label}\r\n                                onClick= {() => this.setLabel(label) }\r\n                                className=\"label\"\r\n                                style={{background: label}}></span>\r\n                            })}\r\n                            <hr></hr>\r\n                        </div>\r\n                        <div className=\"edit-area\">\r\n                            <span className=\"edit-icon\">&#x270E;</span>\r\n                            <TextareaAutosize \r\n                            className=\"textbox-edit\"\r\n                            defaultValue={this.props.cardData.text}\r\n                            ref={this.textInput}\r\n                            ></TextareaAutosize>\r\n                        </div>\r\n                        <div>\r\n                            <p className=\"label-title\">labels:</p>\r\n                            {this.state.selectedLabels.map((label) => {\r\n                                return <span \r\n                                className=\"label\" \r\n                                style={{background: label}}\r\n                                key={label}></span>\r\n                            })}\r\n                        </div>\r\n                        <button className=\"submit\">Save changes</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nEditCardModal.propTypes = {\r\n    modalOpen: PropTypes.bool.isRequired,\r\n    toggleModal: PropTypes.func.isRequired,\r\n    cardData: PropTypes.object.isRequired\r\n}\r\n\r\nexport default EditCardModal","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {cardsRef} from '../Firebase'\r\nimport EditCardModal from './EditCardModal'\r\nimport TextareaAutosize from 'react-autosize-textarea'\r\n\r\nclass Card extends React.Component {\r\n    state = {\r\n        modalOpen: false\r\n    }\r\n    toggleModal = () => {\r\n        this.setState({modalOpen: !this.state.modalOpen})\r\n    }\r\n    deleteCard = async (e) => {\r\n        try {\r\n            e.preventDefault()\r\n            const cardId = this.props.data.id\r\n            const card = await cardsRef.doc(cardId)\r\n            card.delete()\r\n        } catch (error) {\r\n            console.error('Error deleting card:', error)\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n            <div className=\"card\">\r\n                <div className=\"cards-labels\">\r\n                    {this.props.data.labels.map(label => {\r\n                        return <span key={label}\r\n                        style={{background:label}}\r\n                        className=\"label\"></span>\r\n                    })}\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    {/* <p onClick={this.toggleModal}>{this.props.data.text}</p> */}\r\n                    <TextareaAutosize \r\n                        onClick={this.toggleModal}\r\n                        readOnly\r\n                        value={this.props.data.text}></TextareaAutosize>\r\n                    <span onClick={this.deleteCard}>&times;</span>\r\n                </div>\r\n            </div>\r\n            <EditCardModal modalOpen={this.state.modalOpen}\r\n            toggleModal={this.toggleModal}\r\n            cardData={this.props.data}></EditCardModal>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nCard.propTypes = {\r\n    data: PropTypes.object.isRequired\r\n}\r\nexport default Card","import React from 'react'\r\nimport Card from './Card'\r\nimport propTypes from 'prop-types'\r\nimport {cardsRef, listsRef} from '../Firebase'\r\n\r\nclass List extends React.Component {\r\n    state = {\r\n        currentCards: []\r\n    }\r\n    componentDidMount() {\r\n        this.fetchCards(this.props.list.id)\r\n    }\r\n    fetchCards =async listId => {\r\n        try {\r\n            await cardsRef\r\n            .where('card.listId', '==', listId)\r\n            .orderBy('card.createdAt')\r\n            .onSnapshot(snapshot => {\r\n                snapshot.docChanges()\r\n                .forEach(change => {\r\n                    const doc = change.doc\r\n                    const card = {\r\n                        id: doc.id,\r\n                        text: doc.data().card.text,\r\n                        labels: doc.data().card.labels\r\n                    }\r\n                    if(change.type === 'added') {\r\n                        this.setState ({currentCards: [...this.state.currentCards, card]})\r\n                    }\r\n                    if(change.type === 'removed') {\r\n                        this.setState({\r\n                            currentCards: [\r\n                                ...this.state.currentCards.filter(card => {\r\n                                    return card.id !== change.doc.id\r\n                                })\r\n                            ]\r\n                        })\r\n                    }\r\n                    if(change.type === 'modified') {\r\n                        const index = this.state.currentCards.findIndex(item => {\r\n                            return item.id === change.doc.id\r\n                        })\r\n                        const cards = [...this.state.currentCards]\r\n                        cards[index] = card\r\n                        this.setState({currentCards: cards})\r\n                    }\r\n                })\r\n            })\r\n        } catch(error) {\r\n            console.error('Error fetching cards', error)\r\n        }\r\n    }\r\n    nameInput = React.createRef()\r\n    createNewCard = async (e) => {\r\n        try {\r\n        e.preventDefault()\r\n        const card = {\r\n            text: this.nameInput.current.value,\r\n            listId: this.props.list.id,\r\n            labels: [],\r\n            createdAt: new Date()\r\n        }\r\n        if(card.text && card.listId) {\r\n            await cardsRef.add ({card})\r\n        }\r\n        this.nameInput.current.value = ''\r\n        console.log('new card added ' + card.text)\r\n        } catch(error) {\r\n            console.error ('Error creating a new card: ', error)\r\n        }\r\n    }\r\n    deleteList = () => {\r\n        const listId = this.props.list.id\r\n        this.props.deleteList(listId)\r\n    }\r\n    updateList = async e => {\r\n        try {\r\n            const listId = this.props.list.id\r\n            const newTitle = e.currentTarget.value\r\n            const list = await listsRef.doc(listId)\r\n            list.update({'list.title': newTitle})\r\n        } catch (error) {\r\n            console.log('Error updating list:', error)\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"list\">\r\n                <div className=\"list-header\">\r\n                    <input\r\n                    type=\"text\"\r\n                    name=\"listTitle\"\r\n                    onChange={this.updateList}\r\n                    defaultValue={this.props.list.title}></input>\r\n                    <span onClick={this.deleteList}>&times;</span>\r\n                </div>\r\n                {Object.keys(this.state.currentCards).map(key => (\r\n                    <Card \r\n                    key={key}\r\n                    data={this.state.currentCards[key]} \r\n                    />\r\n                ))}\r\n                <form onSubmit={this.createNewCard} className=\"new-card-wrapper\">\r\n                    <input type=\"text\" ref={this.nameInput} name=\"name\" placeholder=\" + New Card\"></input>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nList.propTypes = {\r\n    list: propTypes.object.isRequired,\r\n    deleteList: propTypes.func.isRequired\r\n}\r\nexport default List","import React from 'react'\r\n\r\nconst AuthContext = React.createContext()\r\n\r\nclass AuthProvider extends React.Component {\r\n    state = {\r\n        user: {\r\n            name: 'Byron'\r\n        }\r\n    }\r\n    render() {\r\n        return(\r\n            <AuthContext.Provider\r\n            value={{user: this.state.user}}>\r\n                {this.props.children}\r\n            </AuthContext.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nconst AuthConsumer = AuthContext.Consumer\r\n\r\nexport {AuthProvider, AuthConsumer}","import React from 'react'\r\nimport List from './List'\r\nimport {boardsRef, listsRef} from '../Firebase'\r\nimport propTypes from 'prop-types'\r\nimport {AuthConsumer} from './AuthContext'\r\n\r\nclass Board extends React.Component {\r\n    state = {\r\n        currentBoard: {},\r\n        currentLists: [] \r\n    }\r\n    componentDidMount() {\r\n        this.getBoard(this.props.match.params.boardId)\r\n        this.getLists(this.props.match.params.boardId)\r\n    }\r\n    getLists = async boardId => {\r\n        try {\r\n            await listsRef.where('list.board', '==', boardId)\r\n            .orderBy('list.createdAt')\r\n            .onSnapshot(snapshot => {\r\n                snapshot.docChanges()\r\n                .forEach(change => {\r\n                    if(change.type === 'added') {\r\n                        const doc = change.doc\r\n                        const list = {\r\n                        id: doc.id,\r\n                        title: doc.data().list.title\r\n                        }\r\n                        this.setState({\r\n                            currentLists: [...this.state.currentLists, list]\r\n                        })\r\n                    }\r\n                    if(change.type === 'removed') {\r\n                        this.setState({\r\n                            currentLists: [\r\n                                ...this.state.currentLists.filter(list => {\r\n                                    return list.id !== change.doc.id\r\n                                })\r\n                            ]\r\n                        })\r\n                    }\r\n                })\r\n            })\r\n        } catch (error) {\r\n            console.error('Error fetching lists: ', error)\r\n        }\r\n    }\r\n    getBoard = async boardId => {\r\n        try{\r\n            const board = await boardsRef.doc(boardId).get()\r\n            this.setState({currentBoard: board.data().board})\r\n        } catch (error) {\r\n            console.log('Error getting boards ', error)\r\n        }\r\n    }\r\n    addBoardInput = React.createRef()\r\n    createNewList = async (e) => {\r\n        try {\r\n        e.preventDefault()\r\n        const list = {\r\n            title: this.addBoardInput.current.value,\r\n            board: this.props.match.params.boardId,\r\n            createdAt: new Date(),\r\n        }\r\n        if(list.title && list.board) {\r\n            await listsRef.add ({list})\r\n        }\r\n        this.addBoardInput.current.value = ''\r\n        } catch(error) {\r\n            console.error ('Error creating a new list: ', error)\r\n        }\r\n    }\r\n    deleteBoard = async () => {\r\n        const boardId = this.props.match.params.boardId\r\n        this.props.deleteBoard(boardId)\r\n    }\r\n    updateBoard = e => {\r\n        const boardId = this.props.match.params.boardId\r\n        const newTitle = e.currentTarget.value\r\n        if(boardId && newTitle) {\r\n            this.props.updateBoard(boardId, newTitle)\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <AuthConsumer>\r\n                {({user}) => (\r\n                <div\r\n                className=\"board-wrapper\"\r\n                style = {{\r\n                    backgroundColor: this.state.currentBoard.background\r\n                }}>\r\n                    <div className=\"board-header\">\r\n                        <input\r\n                        type=\"text\"\r\n                        name=\"boardTitle\"\r\n                        onChange={this.updateBoard}\r\n                        defaultValue={this.state.currentBoard.title}></input>\r\n                        <button onClick={this.deleteBoard}>Delete board</button>\r\n                    </div>\r\n                    <div className=\"lists-wrapper\">\r\n                        {Object.keys(this.state.currentLists).map(key => (\r\n                        <List \r\n                        key={this.state.currentLists[key].id} \r\n                        list={this.state.currentLists[key]}\r\n                        deleteList={this.props.deleteList}/> \r\n                        ))}\r\n                    </div>\r\n                    <form onSubmit={this.createNewList} className=\"new-list-wrapper\">\r\n                        <input type=\"text\" ref={this.addBoardInput} name=\"name\" placeholder=\" +  New List\"></input>\r\n                    </form>\r\n                </div>\r\n                )}\r\n            </AuthConsumer>\r\n        )\r\n    }\r\n}\r\n\r\nBoard.propTypes = {\r\n    deleteBoard: propTypes.func.isRequired,\r\n    deleteList: propTypes.func.isRequired,\r\n    updateBoard: propTypes.func.isRequired\r\n}\r\n\r\nexport default Board","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nclass BoardPreview extends React.Component {\r\n    goToBoard = () => {\r\n        const boardId = this.props.board.id\r\n        this.props.history.push({\r\n            pathname: `/board/${boardId}`\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <ul className=\"board-preview-item\" onClick={this.goToBoard} style={{ backgroundColor: this.props.board.background}}>\r\n                <li>{this.props.board.title}</li>\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nBoardPreview.propTypes = {\r\n    board: PropTypes.object.isRequired\r\n}\r\nexport default withRouter(BoardPreview)","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass CreateBoardForm extends React.Component {\r\n    state = {\r\n       title:'',\r\n       background: '#80ccff',\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        const board = {\r\n            title: this.state.title,\r\n            background: this.state.background,\r\n            createdAt: new Date(),\r\n            user:'abc123'\r\n        }\r\n        if(board.title && board.background) {\r\n            this.props.createNewBoard(board)\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <form className=\"create-board-wrapper\" onSubmit={this.handleSubmit}>\r\n                <input type=\"type\" name=\"name\" placeholder=\"Board name\" onChange={(e) => this.setState({ title: e.target.value })}></input>\r\n                <select name=\"background\" onChange={(e) => this.setState({background: e.target.value})}>\r\n                    <option value=\"#80ccff\">Blue</option>\r\n                    <option value=\"#80ffaa\">Green</option>\r\n                    <option value=\"#f94a1e\">Red</option>\r\n                    <option value=\"#ffb3ff\">Pink</option>\r\n                    <option value=\"#bf00ff\">Purple</option>\r\n                    <option value=\"#ffad33\">Orange</option>\r\n                </select>\r\n                <button type=\"submit\">Create new board</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nCreateBoardForm.propTypes = {\r\n    createNewBoard: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CreateBoardForm","import React from 'react'\r\nimport BoardPreview from '../BoardPreview'\r\nimport PropTypes from 'prop-types'\r\nimport CreateBoardForm from'../CreateBoardForm'\r\nclass Home extends React.Component {\r\n    componentDidMount() {\r\n        this.props.getBoards()\r\n      }\r\n      \r\n    render() {\r\n        return (\r\n            <div>\r\n                <span>{this.props.match.params.userId}</span>\r\n                <CreateBoardForm createNewBoard={this.props.createNewBoard} />\r\n                    <div className=\"board-preview-wrapper\">\r\n\r\n            {\r\n                Object.keys(this.props.boards).map(key => (\r\n                <BoardPreview \r\n                key={key}\r\n                board={this.props.boards[key]} />\r\n            ))}\r\n                    </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nHome.propTypes = {\r\n    getBoards: PropTypes.func.isRequired,\r\n    boards: PropTypes.array.isRequired,\r\n    createNewBoard: PropTypes.func.isRequired\r\n  }\r\n\r\nexport default Home","import React from 'react'\r\n\r\nconst PageNotFound = () => (\r\n    <div>\r\n        <h3>Page Not Found</h3>\r\n    </div>\r\n)\r\n\r\nexport default PageNotFound","import React from 'react'\r\n\r\nclass Header extends React.Component{\r\n\r\n    render() {\r\n        return(\r\n            <header>\r\n            <a href=\"/trello-clone\">\r\n                <span role=\"img\" aria-label=\"house emoji\">&#127968;</span>\r\n            </a>\r\n            <h1>Trello Clone</h1>\r\n            </header>\r\n        )   \r\n    }\r\n}\r\n\r\nexport default Header","import React from 'react';\r\nimport './App.css';\r\nimport Board from './components/Board';\r\nimport Home from './components/pages/Home';\r\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\r\nimport PageNotFound from './components/pages/PageNotFound'\r\nimport {boardsRef, listsRef, cardsRef} from './Firebase'\r\nimport {AuthProvider} from './components/AuthContext'\r\nimport Header from './components/Header'\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    boards:[]\r\n  }\r\n  getBoards = async userId => {\r\n    try {\r\n      this.setState({boards: []})\r\n      const boards = await boardsRef.get()\r\n      boards.forEach(board => {\r\n        const data = board.data().board\r\n        const boardObj = {\r\n          id: board.id,\r\n          ...data\r\n        }\r\n        this.setState({boards: [...this.state.boards, boardObj]})\r\n      })\r\n    } catch (error) {\r\n      console.log('Error getting boards', error)\r\n    }\r\n  }\r\n  createNewBoard = async board => {\r\n    try {\r\n    const newBoard = await boardsRef.add({board})\r\n    const boardObj = {\r\n      id: newBoard.id,\r\n      ...board\r\n    }\r\n    this.setState({boards: [...this.state.boards, boardObj]})\r\n    } catch(error) {\r\n      console.error('Error creating new board: ', error)\r\n    }\r\n  }\r\n  deleteList = async (listId) => {\r\n    try {\r\n        const cards = await cardsRef.where('card.listId', '==', listId).get()\r\n        if(cards.docs.length !== 0) {\r\n            cards.forEach(card => {\r\n                card.ref.delete()\r\n            })\r\n        }\r\n        const list = await listsRef.doc(listId)\r\n        list.delete()\r\n    } catch (error) {\r\n        console.error('Error deleting list', error)\r\n    }\r\n}\r\n  deleteBoard =async boardId => {\r\n    try {\r\n      const lists = await listsRef.where('list.board', '==', boardId).get()\r\n      if(lists.docs.length !==0) {\r\n        lists.forEach(list => {\r\n          this.deleteList(list.ref.id)\r\n        })\r\n      }\r\n      const board = await boardsRef.doc(boardId)\r\n      this.setState({\r\n        boards: [\r\n          ...this.state.boards.filter(board => {\r\n            return board.id !== boardId\r\n          })\r\n        ]\r\n      })\r\n      board.delete()\r\n    } catch (error) {\r\n      console.error('Error deleting board: ', error)\r\n    }\r\n  }\r\n  updateBoard = async (boardId, newTitle) => {\r\n    try {\r\n      const board = await boardsRef.doc(boardId)\r\n      board.update({'board.title': newTitle})\r\n    } catch(error) {\r\n      console.error('Error updating board: ', error)\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <BrowserRouter>\r\n          <AuthProvider>\r\n            <Header/>\r\n            <Switch>\r\n              <Route exact path=\"/trello-clone\" render={(props) => (\r\n                <Home \r\n                  {...props}\r\n                  updateBoard={this.updateBoard}\r\n                  getBoards={this.getBoards}\r\n                  boards = {this.state.boards} \r\n                  createNewBoard={this.createNewBoard} />\r\n                )}></Route>\r\n                <Route path=\"/board/:boardId\" render={props => (\r\n                  <Board\r\n                  {...props}\r\n                  updateBoard={this.updateBoard}\r\n                  deleteBoard={this.deleteBoard}\r\n                  deleteList={this.deleteList}></Board>\r\n                )}></Route>\r\n                <Route component={PageNotFound}></Route>\r\n            </Switch>\r\n          </AuthProvider>\r\n        </BrowserRouter>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}